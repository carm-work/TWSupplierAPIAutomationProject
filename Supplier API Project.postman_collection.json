{
	"info": {
		"_postman_id": "4316241a-a225-4e31-90dc-47251dab2a23",
		"name": "Supplier API Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29202362",
		"_collection_link": "https://winter-shuttle-364799.postman.co/workspace/Car's-Workspace~67c3a3bd-7ea1-4bce-84ad-0b2888ef4f69/collection/29202362-4316241a-a225-4e31-90dc-47251dab2a23?action=share&source=collection_link&creator=29202362"
	},
	"item": [
		{
			"name": "Token Generation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// MMU 02.26.2024\r",
							"//Token Generation\r",
							"// #1. Generate token\r",
							"// access_token is to be saved and used for all subsequent API calls\r",
							"pm.test(\"Token generation is successful\", function () {\r",
							"  pm.expect(pm.response.json().status).to.eql(\"ok\");\r",
							"});\r",
							"\r",
							"// #2. Get TOKEN value from response and set it as environment variable\r",
							"pm.test(\"Token is set as environment variable\", function () {\r",
							"  pm.environment.set(`TOKEN`, pm.response.json().data.access_token);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{API-KEY}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "TWSP-API-KEY",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "CF-Access-Client-Secret",
						"value": "9eac56b9090e23ace551b162449286677e85f08be245412c58d010b84dbf2372",
						"type": "text",
						"disabled": true
					},
					{
						"key": "CF-Access-Client-Id",
						"value": "e8b067c38afeacdc0865624ae425e366.access",
						"type": "text",
						"disabled": true
					},
					{
						"key": "cookie",
						"value": "server=QA020",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{DOMAIN}}/v/api/v1/authenticate/generate_token",
					"host": [
						"{{DOMAIN}}"
					],
					"path": [
						"v",
						"api",
						"v1",
						"authenticate",
						"generate_token"
					]
				},
				"description": "Submit a pre-assigned API key in exchange for a Access Token that will be used to authorize for all subsequent API calls. There will be a limit of 25 Access Token at one time and expires after 60 minutes after first creation."
			},
			"response": []
		},
		{
			"name": "Get PO",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// MMU 02.27.2024\r",
							"// Get Purchase Order Details\r",
							"\r",
							"// #1A. Check if the status is 'ok'\r",
							"if (pm.response.json().status === 'ok') {\r",
							"    // Assert that PO number is valid\r",
							"    pm.test(\"PO Number is valid\", function() {\r",
							"        pm.expect(pm.response.json().data.purchase_order).to.exist; // Validate that PO number is in the response\r",
							"    });\r",
							"}\r",
							"\r",
							"// #1B. Check if the status is 'fail'\r",
							"else if (pm.response.json().status === 'fail') {\r",
							"    // Assert that PO number is invalid\r",
							"    pm.test(\"Invalid PO Number\", function() {\r",
							"        pm.expect(pm.response.json().data.message).to.exist;\r",
							"        pm.expect(pm.response.json().data.message).to.equal(\"[SPA_GET_PO::02] Order not found\");\r",
							"    });\r",
							"}\r",
							"\r",
							"// #1C. Check if Invalid Token/Token Expired\r",
							"else {\r",
							"    // Assert that token is invalid/expired\r",
							"    pm.test(\"Invalid Access Token/Token Expired\", function() {\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"}\r",
							"\r",
							"// Check properties of a valid PO Number response\r",
							"// #2. PO Num\r",
							"pm.test(\"PO data type is string; with PO prefix\", function () {\r",
							"    pm.expect(pm.response.json().data.purchase_order).to.be.a('string'); // Validate that the PO number is a string\r",
							"\r",
							"// #3. Supplier ID\r",
							"// supplier_id should be the main supplier identifier\r",
							"pm.test(\"Supplier ID returned is the parent supplier ID; data type is number\", function () {\r",
							"    pm.expect(pm.response.json().data.supplier_id).to.exist; // Validate that Supplier ID is in the response\r",
							"    pm.expect(pm.response.json().data.supplier_id).to.be.a('number'); // Validate that Supplier ID data type is number\r",
							"});\r",
							"\r",
							"// #4. Order Status Code\r",
							"// order_status_code can be â€˜UNSHIPPED_ORDER','LABELLED','MANIFESTED','CANCELLED','WAITING'\r",
							"\r",
							"//pm.test(\"Order Status Code is either MANIFESTED, LABELLED, UNSHIPPED_ORDER or CANCELLED\", function () {\r",
							"  //pm.expect(pm.response.json().data.order_status_code).to.exist; // Validate that Order Status Code is in the response\r",
							"  //pm.expect(pm.response.json().data.order_status_code).to.be.oneOf([\"MANIFESTED\", \"LABELLED\", \"UNSHIPPED_ORDER\", \"CANCELLED\"]); // Validate that Order Status Code is either \"MANIFESTED\", \"LABELLED\", \"UNSHIPPED_ORDER\" or \"CANCELLED\"\r",
							"//});\r",
							"var orderStatusCode = pm.response.json().data.order_status_code;\r",
							"pm.test(\"Order status code is \" + orderStatusCode); // Print the message including the value of order_status_code\r",
							"\r",
							"// #5. Order Creation Date\r",
							"// order_creation_date is when order is first placed by customer\r",
							"pm.test(\"Order Creation Date is returned; data type: date; matches the expected format (YYYY-MM-DD)\", function () {\r",
							"  pm.expect(pm.response.json().data.order_creation_date).to.exist; // Validate that Order Creation Date is in the response\r",
							"  pm.expect(pm.response.json().data.order_creation_date).to.match(/\\d{4}-\\d{2}-\\d{2}/); // Validate that Order Creation Date data type is date and matches the expected format\r",
							"});\r",
							"\r",
							"// #6. Order Ready Date\r",
							"// order_ready_date is the date time when the order is able to be received by supplier and is used for search purposes\r",
							"pm.test(\"Order Ready Date is returned; data type: date; matches the expected format (YYYY-MM-DD)\", function () {\r",
							"  pm.expect(pm.response.json().data.order_ready_date).to.exist; // Validate that Order Ready Date is in the response\r",
							"  pm.expect(pm.response.json().data.order_ready_date).to.match(/\\d{4}-\\d{2}-\\d{2}/); // Validate that Order Ready Date data type is date and matches the expected format\r",
							"});\r",
							"\r",
							"// #7. Must Ship Date (latest must_ship_date of all the items)\r",
							"// must_ship_date is the agreed T+n days from order_creation_date\r",
							"pm.test(\"Must Ship Date is returned; data type: date; matches the expected format (YYYY-MM-DD\", function () {\r",
							"  pm.expect(pm.response.json().data.must_ship_date).to.exist; // Validate that Must Ship Date is in the response\r",
							"  pm.expect(pm.response.json().data.must_ship_date).to.match(/\\d{4}-\\d{2}-\\d{2}/); // Validate that Must Ship Date data type is date and matches the expected format\r",
							"});\r",
							"\r",
							"// Backorder Date\r",
							"// backorder_date is only applicable when the order is marked as delayed, get the latest backorder_date of all the items\r",
							"// #8A.Check if Backorder Date is null\r",
							"if (!pm.response.json().data.backorder_date) {\r",
							"    // Assert that Backorder Date is null\r",
							"    pm.test(\"PO is not backordered\", function() {\r",
							"        pm.expect(pm.response.json().data.backorder_date).to.equal(\"\");\r",
							"    });\r",
							"} \r",
							"// #8B. Check if Backorder Date has value\r",
							"else {\r",
							"    // Assert that Backorder Date data type is date and matches the expected format\r",
							"    pm.test(\"PO is backordered; Data type is date; matches the expected format (YYYY-MM-DD)\", function() {\r",
							"        pm.expect(pm.response.json().data.backorder_date).to.match(/\\d{4}-\\d{2}-\\d{2}/);\r",
							"    });\r",
							"}\r",
							"\r",
							"// Ready for Pickup Date\r",
							"// rfp_date is date is provided from supplier for when consignment is labelled and staged for carrier pickup\r",
							"// #9A. Check if Ready for Pickup Date is null\r",
							"if (!pm.response.json().data.rfp_date) {\r",
							"    // Assert that Ready for Pickup Date is null\r",
							"    pm.test(\"PO has no RFP Date\", function() {\r",
							"        pm.expect(pm.response.json().data.rfp_date).to.equal(\"\");\r",
							"    });\r",
							"} \r",
							"// #9B. Check if Ready for Pickup Date has value\r",
							"else {\r",
							"    // Assert that RFP date data type is date and matches the expected format\r",
							"    pm.test(\"PO has RFP Date; Data type is date; matches the expected format (YYYY-MM-DD)\", function() {\r",
							"        pm.expect(pm.response.json().data.rfp_date).to.match(/\\d{4}-\\d{2}-\\d{2}/);\r",
							"    });\r",
							"}\r",
							"\r",
							"// Dispatch Date\r",
							"// dispatch_date is when carrier pick up the consignment and reflected in the first tracking scan. Get the latest ship date\r",
							"// #10A. Check if Dispatch Date is null\r",
							"if (!pm.response.json().data.dispatch_date) {\r",
							"    // Assert that Dispatch Date is null\r",
							"    pm.test(\"PO has no Dispatch Date\", function() {\r",
							"        pm.expect(pm.response.json().data.dispatch_date).to.equal(\"\");\r",
							"    });\r",
							"} \r",
							"// #10B. Check if Dispatch Date has value\r",
							"else {\r",
							"    // Assert that Dispatch Date data type is date and matches the expected format\r",
							"    pm.test(\"PO has Dispatch Date; Data type is date; matches the expected format (YYYY-MM-DD)\", function() {\r",
							"        pm.expect(pm.response.json().data.dispatch_date).to.match(/\\d{4}-\\d{2}-\\d{2}/);\r",
							"    });\r",
							"}\r",
							"\r",
							"// Delivered Date\r",
							"// delivered_date is when carrier drop off at the customer as the last tracking scan\r",
							"// #11A. Check if Delivered Date is null\r",
							"if (!pm.response.json().data.delivered_date) {\r",
							"    // Assert that Delivered Date is null\r",
							"    pm.test(\"PO has no Delivered Date\", function() {\r",
							"        pm.expect(pm.response.json().data.delivered_date).to.equal(\"\");\r",
							"    });\r",
							"} \r",
							"// #11B. Check if Delivered Date has value\r",
							"else {\r",
							"    // Assert that Delivered Date data type is date and matches the expected format\r",
							"    pm.test(\"PO has Delivered Date, Data type is date; matches the expected format (YYYY-MM-DD)\", function() {\r",
							"        pm.expect(pm.response.json().data.delivered_date).to.match(/\\d{4}-\\d{2}-\\d{2}/);\r",
							"    });\r",
							"}\r",
							"\r",
							"// #12. Resource Packing Slip\r",
							"pm.test(\"Resource Packing Slip is null\", function () {\r",
							"    pm.expect(pm.response.json().data.resource_packing_slip).to.be.null; // Validate that Resource Packing Slip is null in the response\r",
							"});\r",
							"\r",
							"// Resource Carrier Label\r",
							"// resource_carrier_label provides a download link for the label pdf. Most if not all are already expired.\r",
							"// #13A. Check if Resource Carrier Label is null\r",
							"if (!pm.response.json().data.resource_carrier_label) {\r",
							"    // Assert that Resource Carrier Label is null\r",
							"    pm.test(\"Resource Carrier Label is null\", function() {\r",
							"        pm.expect(pm.response.json().data.resource_carrier_label).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #13B. Check if Resource Carrier Label has value\r",
							"else {\r",
							"    // Assert that Resource Carrier Label data type is string and matches the expected format\r",
							"    pm.test(\"Resource Carrier Label is returned; data type is string; matches the expected format (link)\", function() {\r",
							"        pm.expect(pm.response.json().data.resource_carrier_label).to.match(/https/);\r",
							"    });\r",
							"}\r",
							"\r",
							"// Resource Carrier Manifest\r",
							"// resource_carrier_manifest provides a download link for the manifest pdf. Most if not all are already expired\r",
							"// #14A. Check if Resource Carrier Manifest is null\r",
							"if (!pm.response.json().data.resource_carrier_manifest) {\r",
							"    // Assert that Resource Carrier Manifest is null\r",
							"    pm.test(\"Resource Carrier Manifest is null\", function() {\r",
							"        pm.expect(pm.response.json().data.resource_carrier_manifest).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #14B. Check if Resource Carrier Manifest has value\r",
							"else {\r",
							"    // Assert that Resource Carrier Manifest data type is string and matches the expected format\r",
							"    pm.test(\"Resource Carrier Manifest is returned; data type is string; matches the expected format (link)\", function() {\r",
							"        pm.expect(pm.response.json().data.resource_carrier_manifest).to.match(/https/);\r",
							"    });\r",
							"}\r",
							"\r",
							"// Check Properties of 'Ship From'\r",
							"// ship_from is the consignment pick up address. Should be getting the correct warehouse location detail.\r",
							"\r",
							"// #15. SHIP FROM: Location ID\r",
							"// ship_from â†’ location_id is the designated child warehouse address identifier if applicable, otherwise it will be the same as supplier_id \r",
							"pm.test(\"Ship From: Location ID is returned; data type is number\", function () {\r",
							"  pm.expect(pm.response.json().data.ship_from.location_id).to.exist; // Validate that Location ID is in the response\r",
							"  pm.expect(pm.response.json().data.ship_from.location_id).to.be.a('number'); // Validate that Location ID data type is number\r",
							"});\r",
							"\r",
							"// SHIP FROM: Contact Person\r",
							"// #16A. Check if Ship From Contact Person is null\r",
							"if (!pm.response.json().data.ship_from.contact_person) {\r",
							"    // Assert that Ship From Contact Person is null\r",
							"    pm.test(\"Ship From: Contact Person is null\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.contact_person).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #16B. Check if Ship From Contact Person has value\r",
							"else {\r",
							"    // Assert that Ship From Contact Person data type is string\r",
							"    pm.test(\"Ship From: Contact Person is returned; data type is string\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.contact_person).to.be.a('string');\r",
							"    });\r",
							"}\r",
							"\r",
							"// SHIP FROM: Address\r",
							"// #17A. Check if Ship From Address is null\r",
							"if (!pm.response.json().data.ship_from.address) {\r",
							"    // Assert that Ship From Address is null\r",
							"    pm.test(\"Ship From: Address is null\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.address).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #17B. Check if Ship From Address has value\r",
							"else {\r",
							"    // Assert that Ship From Address data type is string\r",
							"    pm.test(\"Ship From: Address is returned; data type is string\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.address).to.be.a('string');\r",
							"    });\r",
							"}\r",
							"\r",
							"// SHIP FROM: Suburb\r",
							"// #18A. Check if Ship From Suburb is null\r",
							"if (!pm.response.json().data.ship_from.suburb) {\r",
							"    // Assert that Ship From Suburb is null\r",
							"    pm.test(\"Ship From: Suburb is null\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.suburb).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #18B. Check if Ship From Suburb has value\r",
							"else {\r",
							"    // Assert that Ship From Suburb data type is string\r",
							"    pm.test(\"Ship From: Suburb is returned; data type is string\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.suburb).to.be.a('string');\r",
							"    });\r",
							"}\r",
							"\r",
							"// SHIP FROM: Postcode\r",
							"// #19A. Check if Ship From Postcode is null\r",
							"if (!pm.response.json().data.ship_from.postcode) {\r",
							"    // Assert that Ship From Postcode is null\r",
							"    pm.test(\"Ship From: Postcode is null\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.postcode).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #19B. Check if Ship From Postcode has value\r",
							"else {\r",
							"    // Assert that Ship From Postcode data type is string\r",
							"    pm.test(\"Ship From: Postcode is returned; data type is string\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.postcode).to.be.a('string');\r",
							"    });\r",
							"}\r",
							"\r",
							"// SHIP FROM: State\r",
							"// #20A. Check if Ship From State is null\r",
							"if (!pm.response.json().data.ship_from.state) {\r",
							"    // Assert that Ship From State is null\r",
							"    pm.test(\"Ship From: State is null\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.state).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #20B. Check if Ship From State has value\r",
							"else {\r",
							"    // Assert that Ship From State data type is string\r",
							"    pm.test(\"Ship From: State is returned; data type is string\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.state).to.be.a('string');\r",
							"    });\r",
							"}\r",
							"\r",
							"// SHIP FROM: Country\r",
							"// #21A. Check if Ship From Country is null\r",
							"if (!pm.response.json().data.ship_from.country) {\r",
							"    // Assert that Ship From Country is null\r",
							"    pm.test(\"Ship From: Country is null\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.country).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #21B. Check if Ship From Country has value\r",
							"else {\r",
							"    // Assert that Ship From Country data type is string\r",
							"    pm.test(\"Ship From: Country is returned; data type is string\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.country).to.be.a('string');\r",
							"    });\r",
							"}\r",
							"\r",
							"// SHIP FROM: Email\r",
							"// #22A. Check if Ship From Email is null\r",
							"if (!pm.response.json().data.ship_from.email) {\r",
							"    // Assert that Ship From Email is null\r",
							"    pm.test(\"Ship From: Email is null\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.email).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #22B. Check if Ship From Email has value\r",
							"else {\r",
							"    // Assert that Ship From Email data type is string\r",
							"    pm.test(\"Ship From: Email is returned; data type is string\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.email).to.be.a('string');\r",
							"    });\r",
							"}\r",
							"\r",
							"// SHIP FROM: Phone\r",
							"// #23A. Check if Ship From Phone is null\r",
							"if (!pm.response.json().data.ship_from.phone) {\r",
							"    // Assert that Ship From Phone is null\r",
							"    pm.test(\"Ship From: Phone is null\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.phone).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #23B. Check if Ship From Phone has value\r",
							"else {\r",
							"    // Assert that Ship From Phone data type is string\r",
							"    pm.test(\"Ship From: Phone is returned; data type is string\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_from.phone).to.be.a('string');\r",
							"    });\r",
							"}\r",
							"\r",
							"// Check Properties of 'Ship To'\r",
							"// ship_to section is the consignment delivery address. Should be getting the correct user details from uber wizardâ€™s  Shipping Info section.\r",
							"\r",
							"// SHIP TO: Contact Person\r",
							"// #24A. Check if Ship To Contact Person is null\r",
							"if (!pm.response.json().data.ship_to.contact_person) {\r",
							"    // Assert that Ship To Contact Person is null\r",
							"    pm.test(\"Ship To: Contact Person is null\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_to.contact_person).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #24B. Check if Ship To Contact Person has value\r",
							"else {\r",
							"    // Assert that Ship To Contact Person data type is string\r",
							"    pm.test(\"Ship To: Contact Person is returned; data type is string\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_to.contact_person).to.be.a('string');\r",
							"    });\r",
							"}\r",
							"\r",
							"// SHIP TO: Address\r",
							"// #25A. Check if Ship To Address is null\r",
							"if (!pm.response.json().data.ship_to.address) {\r",
							"    // Assert that Ship To Address is null\r",
							"    pm.test(\"Ship To: Address is null\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_to.address).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #25B. Check if Ship To Address has value\r",
							"else {\r",
							"    // Assert that Ship To Address data type is string\r",
							"    pm.test(\"Ship To: Address is returned; data type is string\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_to.address).to.be.a('string');\r",
							"    });\r",
							"}\r",
							"\r",
							"// SHIP TO: Suburb\r",
							"// #26A. Check if Ship To Suburb is null\r",
							"if (!pm.response.json().data.ship_to.suburb) {\r",
							"    // Assert that Ship To Suburb is null\r",
							"    pm.test(\"Ship To: Suburb is null\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_to.suburb).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #26B. Check if Ship To Suburb has value\r",
							"else {\r",
							"    // Assert that Ship To Suburb data type is string\r",
							"    pm.test(\"Ship To: Suburb is returned; data type is string\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_to.suburb).to.be.a('string');\r",
							"    });\r",
							"}\r",
							"\r",
							"// SHIP TO: Postcode\r",
							"// #27A. Check if Ship To Postcode is null\r",
							"if (!pm.response.json().data.ship_to.postcode) {\r",
							"    // Assert that Ship To Postcode is null\r",
							"    pm.test(\"Ship To: Postcode is null\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_to.postcode).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #27B. Check if Ship To Postcode has value\r",
							"else {\r",
							"    // Assert that Ship To Postcode data type is string\r",
							"    pm.test(\"Ship To: Postcode is returned; data type is string\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_to.postcode).to.be.a('string');\r",
							"    });\r",
							"}\r",
							"\r",
							"// SHIP TO: State\r",
							"// #28A. Check if Ship To State is null\r",
							"if (!pm.response.json().data.ship_to.state) {\r",
							"    // Assert that Ship To State is null\r",
							"    pm.test(\"Ship To: State is null\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_to.state).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #28B. Check if Ship To State has value\r",
							"else {\r",
							"    // Assert that Ship To State data type is string\r",
							"    pm.test(\"Ship To: State is returned; data type is string\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_to.state).to.be.a('string');\r",
							"    });\r",
							"}\r",
							"\r",
							"// SHIP TO: Country\r",
							"// #29A. Check if Ship To Country is null\r",
							"if (!pm.response.json().data.ship_to.country) {\r",
							"    // Assert that Ship To Country is null\r",
							"    pm.test(\"Ship To: Country is null\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_to.country).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #29B. Check if Ship To Country has value\r",
							"else {\r",
							"    // Assert that Ship To Country data type is string\r",
							"    pm.test(\"Ship To: Country is returned; data type is string\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_to.country).to.be.a('string');\r",
							"    });\r",
							"}\r",
							"\r",
							"// SHIP TO: Phone\r",
							"// #30A. Check if Ship To Phone is null\r",
							"if (!pm.response.json().data.ship_to.phone) {\r",
							"    // Assert that Ship To Phone is null\r",
							"    pm.test(\"Ship To: Phone is null\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_to.phone).to.be.null;\r",
							"    });\r",
							"} \r",
							"// #30B. Check if Ship To Phone has value\r",
							"else {\r",
							"    // Assert that Ship To Phone data type is string\r",
							"    pm.test(\"Ship To: Phone  is returned; data type is string\", function() {\r",
							"        pm.expect(pm.response.json().data.ship_to.phone).to.be.a('string');\r",
							"    });\r",
							"}\r",
							"\r",
							"// Check Properties of 'Order Product'\r",
							"// order_product section contain the line items in the purchase order. Should only be returning the non-cancelled items.\r",
							"const orderResponse = pm.response.json();\r",
							"console.log(orderResponse);\r",
							"\r",
							"if (orderResponse.data && orderResponse.data.order_product) {\r",
							"    orderResponse.data.order_product.forEach((product, index) =>  {\r",
							"        // Perform tests on each product\r",
							"    // #31. Order Product: Line Item Number\r",
							"    pm.test(`Order Product: Line Item Number for SKU ${product.sku} is not empty; data type is number`, () => {\r",
							"        pm.expect(product.line_item_no).to.not.be.null; // Validate that Line Item Number is in the response\r",
							"        pm.expect(product.line_item_no).to.be.a('number'); // Validate that Line Item Number data type is number\r",
							"    });\r",
							"    // #32. Order Product: SKU\r",
							"    pm.test(`Order Product: SKU ${product.sku} is not empty; data type is string`, () => {\r",
							"        pm.expect(product.sku).to.not.be.null; // Validate that SKU is in the response\r",
							"        pm.expect(product.sku).to.be.a('string'); // Validate that SKU data type is string\r",
							"    });\r",
							"    // #33. Order Product: Reference Product ID\r",
							"\t        pm.test(`Reference Product ID for SKU ${product.sku} is not empty; data type is string`), () => {\r",
							"            if (product.ref_product_id !== null) {\r",
							"                pm.expect(product.ref_product_id).to.be.a('string');\r",
							"            }\r",
							"        };\r",
							"    });\r",
							"        pm.test(\"Original PO Number is returned; data type is string\", function() {\r",
							"            pm.expect(orderResponse.data.replacement.original_purchase_order).to.be.a('string');\r",
							"        });\r",
							"    } else {\r",
							"        pm.test(\"Replacement section does not exist because PO number is NOT a replacement part\", function() {\r",
							"            pm.expect(orderResponse.data.replacement).to.not.exist;\r",
							"        });\r",
							"    }\r",
							"\r",
							"    // #34. Order Product: Product Description\r",
							"    pm.test(`Order Product: Product Description for SKU ${product.sku} is not empty; data type is string`, () => {\r",
							"        pm.expect(product.product_description).to.not.be.null; // Validate that Product Description is in the response\r",
							"        pm.expect(product.product_description).to.be.a('string'); // Validate that Product Description data type is string\r",
							"    });\r",
							"    // #35. Order Product: Quantity\r",
							"    pm.test(`Order Product: Quantity for SKU ${product.sku} is not empty; data type is number`, () => {\r",
							"        pm.expect(product.quantity).to.not.be.null; // Validate that Quantity is in the response\r",
							"        pm.expect(product.quantity).to.be.a('number'); // Validate that Quantity data type is number\r",
							"    });\r",
							"    // #36. Order Product: Wholesale Price\r",
							"    // wholesale_price â†’ the individual wholesale price per line item SKU, ignoring quantity\r",
							"    pm.test(`Order Product: Wholesale Price for SKU ${product.sku} is not empty; data type is number`, () => {\r",
							"        pm.expect(product.wholesale_price).to.not.be.null; // Validate that Wholesale Price is in the response\r",
							"        pm.expect(product.wholesale_price).to.be.a('number'); // Validate that Wholesale Price data type is number\r",
							"    });\r",
							"    // #37. Order Product: Carrier Name\r",
							"    pm.test(`Order Product: Carrier Name for SKU ${product.sku} is not empty; data type is string`, () => {\r",
							"        pm.expect(product.indicative_carrier_name_service).to.not.be.null; // Validate that Carrier Name is in the response\r",
							"        pm.expect(product.indicative_carrier_name_service).to.be.a('string'); // Validate that Carrier Name data type is string\r",
							"    });\r",
							"\r",
							"// Order Product: Customization\r",
							"// personalisation â†’ list of any applicable pairs of personalised title and value\r",
							"const customizationResponse = pm.response.json();\r",
							"console.log(customizationResponse);\r",
							"\r",
							"customizationResponse.data.order_product.forEach(product => {\r",
							"    // #38A. Check if Product is customized\r",
							"    if (product.customisation && product.customisation.length > 0) {\r",
							"        // Iterate over each customization in the product\r",
							"        product.customisation.forEach(customization => {\r",
							"            // Validate that Customization title and value are strings and not null\r",
							"            pm.test(`SKU ${product.sku} customization title is not empty; data type is string`, () => {\r",
							"                pm.expect(customization.title).to.not.be.null; // Validate that Customization Title is in the response\r",
							"                pm.expect(customization.title).to.be.a('string'); // Validate that Customization Title is a string\r",
							"            });\r",
							"            pm.test(`SKU ${product.sku} customization Value is not empty; data type is string`, () => {\r",
							"                pm.expect(customization.value).to.not.be.null; // Validate that Customization Value is in the response\r",
							"                pm.expect(customization.value).to.be.a('string'); // Validate that Customization Value is a string\r",
							"            });\r",
							"        });\r",
							"    } else {\r",
							"        pm.test(`SKU ${product.sku} has no Customization`, function() {\r",
							"            // #38B. Check if Product has no customization\r",
							"            pm.expect(product.customisation).to.be.null; // Validate that Customization is null for products without customization\r",
							"        });\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"// Consignment\r",
							"const consignmentResponse = pm.response.json().data.consignment;\r",
							"\r",
							"// Check if consignments array is empty\r",
							"if (consignmentResponse.length === 0) {\r",
							"    pm.test(\"Consignment is empty\", function () {\r",
							"        pm.expect(consignmentResponse).to.be.an('array').that.is.empty;\r",
							"    });\r",
							"} else {\r",
							"    // Testing and validating each consignment\r",
							"    \r",
							"    consignmentResponse.forEach((consignment, index) => {\r",
							"        pm.test(`Consignment properties for SKU #${index + 1} is returned`, function () {\r",
							"            // Check if consignment exists\r",
							"            pm.expect(consignment).to.exist;\r",
							"\r",
							"            // Validate container properties\r",
							"            pm.expect(consignment).to.have.property('container_height').that.is.a('number');\r",
							"            pm.expect(consignment).to.have.property('container_width').that.is.a('number');\r",
							"            pm.expect(consignment).to.have.property('container_depth').that.is.a('number');\r",
							"            pm.expect(consignment).to.have.property('container_weight').that.is.a('number');\r",
							"            pm.expect(consignment).to.have.property('container_type').that.is.a('string');\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"// Delivery Requirement\r",
							"const responseData = pm.response.json().data;\r",
							"    // Check if the Authority to Leave exists\r",
							"    // delivery_requirement â†’ authority_to_leave indicate if the delivery is ATL\r",
							"    if (responseData.delivery_requirement) {\r",
							"        const authorityToLeave = responseData.delivery_requirement.authority_to_leave;\r",
							"\r",
							"        // #39A. Check if Authority to Leave is true\r",
							"        if (authorityToLeave === true) {\r",
							"            pm.test(\"Authority to Leave is true\", function () {\r",
							"                pm.expect(true).to.be.true;\r",
							"            });\r",
							"        } else {\r",
							"            // #39B. Check if Authority to Leave is false\r",
							"            pm.test(\"Authority to Leave is false\", function () {\r",
							"                pm.expect(false).to.be.false;\r",
							"            });\r",
							"        }\r",
							"    }\r",
							"    // Check if the White Glove exists\r",
							"    // delivery_requirement â†’ white_glove indicate if specialized carrier is required\r",
							"    if (responseData.delivery_requirement) {\r",
							"        const whiteGlove = responseData.delivery_requirement.white_glove;\r",
							"\r",
							"        // #40A. Check if White Glove is true\r",
							"        if (whiteGlove === true) {\r",
							"            pm.test(\"White Glove is true\", function () {\r",
							"                pm.expect(true).to.be.true;\r",
							"            });\r",
							"        } else {\r",
							"            // #40B. Check if White Glove is false\r",
							"            pm.test(\"White Glove is false\", function () {\r",
							"                pm.expect(false).to.be.false;\r",
							"            });\r",
							"        }\r",
							"    }\r",
							"\r",
							"// Carrier\r",
							"// Assigned Carrier Name Service\r",
							"// carrier â†’ assigned_carrier_name_service is the actual designated carrier provider for this consignment\r",
							"// #40A. Check if Assigned Carrier Name Service is null\r",
							"    if (!pm.response.json().data.carrier.assigned_carrier_name_service) {\r",
							"        // Assert that Assigned Carrier Name Service is null\r",
							"        pm.test(\"Assigned Carrier Name Service is null\", function() {\r",
							"            pm.expect(pm.response.json().data.carrier.assigned_carrier_name_service).to.be.null;\r",
							"        });\r",
							"    } \r",
							"    // #40B. Check if Assigned Carrier Name Service has value\r",
							"    else {\r",
							"        // Assert that Assigned Carrier Name Service data type is string\r",
							"        pm.test(\"Assigned Carrier Name Service is returned; data type is string\", function() {\r",
							"            pm.expect(pm.response.json().data.carrier.assigned_carrier_name_service).to.be.a('string');\r",
							"        });\r",
							"    }\r",
							"\r",
							"// Tracking Number\r",
							"// #41A. Check if Assigned Carrier Name Service is null\r",
							"    if (!pm.response.json().data.carrier.tracking_number) {\r",
							"        // Assert that Tracking Number is null\r",
							"        pm.test(\"Tracking Number is null\", function() {\r",
							"            pm.expect(pm.response.json().data.carrier.tracking_number).to.be.null;\r",
							"        });\r",
							"    } \r",
							"    // #41B. Check if Tracking Number has value\r",
							"    else {\r",
							"        // Assert that Tracking Number data type is string\r",
							"        pm.test(\"Tracking Number is returned; data type is string\", function() {\r",
							"            pm.expect(pm.response.json().data.carrier.tracking_number).to.be.a('string');\r",
							"        });\r",
							"    };\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {},
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "cookie",
						"value": "server=JDAVID;",
						"type": "text",
						"disabled": true
					},
					{
						"key": "cookie",
						"value": "server=QA020",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{DOMAIN}}/v/api/v1/orders/get_purchase_order?is_admin=true&purchase_order=TW44687342-R-634020",
					"host": [
						"{{DOMAIN}}"
					],
					"path": [
						"v",
						"api",
						"v1",
						"orders",
						"get_purchase_order"
					],
					"query": [
						{
							"key": "is_admin",
							"value": "true"
						},
						{
							"key": "purchase_order",
							"value": "TW44687342-R-634020"
						}
					]
				},
				"description": "This API call is intended to return the current state of a order, Order is the equivalent of a Purchase Order or Sales Order in this context."
			},
			"response": []
		},
		{
			"name": "List PO",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// MMU 02.28.2024",
							"// List Purchase Order Details",
							"",
							"// #1A. Check if the status is 'ok'",
							"if (pm.response.json().status === 'ok') {",
							"    pm.test(\"Status is OK\", function() {",
							"        pm.expect(pm.response.json().status).to.eql(\"ok\"); // Validate that status is 'ok'",
							"    });",
							"}",
							"// #1B. Check if Bad Request",
							"//else if (pm.response.json().status === 'fail') {",
							"//    // Assert that response is Bad Request",
							"//    pm.test(\"Bad Request\", function() {",
							"//        pm.response.to.have.status(400);",
							"//    });",
							"//}",
							"// #1C. Check if Invalid Token/Token Expired",
							"else {",
							"//    (pm.response.json().status === 'error') ",
							"    // Assert that token is invalid/expired",
							"    pm.test(\"Invalid Access Token/Token Expired\", function() {",
							"        pm.response.to.have.status(401);",
							"    });",
							"}",
							"",
							"// #2. Check PO list (If empty, will return all. If has a value, will return the inputed po_num.)",
							"pm.test('Purchase Order/s is/are listed; data type is array', function () {",
							"    pm.expect(pm.response.json().data.purchase_order).to.be.an('array'); // Validate that PO is an array",
							"})",
							"",
							"// Order Status Code",
							"// #3A.Check if Order Status Code is null",
							"if (!pm.response.json().data.filter.order_status_code) {",
							"    // Assert that Order Status Code is null",
							"    pm.test(\"Order Status Code is null\", function() {",
							"        pm.expect(pm.response.json().data.filter.order_status_code).to.equal(\"\"); // Validate that Order Status Code is null in the response",
							"    });",
							"} ",
							"// #3B. Check if Order Status Code displayed",
							"else {",
							"    // Assert that Order Status Code is displayed",
							"        pm.test(\"Order Status Code is either MANIFESTED, LABELLED, UNSHIPPED_ORDER or CANCELLED\", function() {",
							"        pm.expect(pm.response.json().data.filter.order_status_code).to.exist; // Validate that Order Status Code is in the response",
							"        pm.expect(pm.response.json().data.filter.order_status_code).to.be.oneOf([\"MANIFESTED\", \"LABELLED\", \"UNSHIPPED_ORDER\", \"CANCELLED\"]); // Validate that Order Status Code is either \"MANIFESTED\", \"LABELLED\", \"UNSHIPPED_ORDER\" or \"CANCELLED\"",
							"    });",
							"}",
							"",
							"// #4. Order Ready Date From",
							"pm.test(\"Order Ready Date From is returned; data type: date; matches the expected format (YYYY-MM-DD)\", function () {",
							"  pm.expect(pm.response.json().data.filter.order_ready_date_from).to.exist; // Validate that Order Ready Date From is in the response",
							"  pm.expect(pm.response.json().data.filter.order_ready_date_from).to.match(/\\d{4}-\\d{2}-\\d{2}/); // Validate that Order Ready Date From data type is date and matches the expected format",
							"});",
							"",
							"// #5. Order Ready Date To",
							"pm.test(\"Order Ready Date To is returned; data type: date; matches the expected format (YYYY-MM-DD)\", function () {",
							"  pm.expect(pm.response.json().data.filter.order_ready_date_to).to.exist; // Validate that Order Ready Date To is in the response",
							"  pm.expect(pm.response.json().data.filter.order_ready_date_to).to.match(/\\d{4}-\\d{2}-\\d{2}/); // Validate that Order Ready Date To data type is date and matches the expected format",
							"});",
							"",
							"// PO",
							"// #6A.Check if PO is null",
							"if (!pm.response.json().data.filter.purchase_order) {",
							"    // Assert that PO is null",
							"    pm.test(\"PO is null\", function() {",
							"        pm.expect(pm.response.json().data.filter.purchase_order).to.equal(\"\"); // Validate that PO is null in the response",
							"    });",
							"} ",
							"// #6B. Check if PO is displayed",
							"else {",
							"    // Assert that PO displayed",
							"    pm.test('PO is returned; data type is string', function () {",
							"        pm.expect(pm.response.json().data.filter.purchase_order).to.be.a('string'); // Validate that PO is a string",
							"    });",
							"}",
							"",
							"//Contain SKU",
							"// #7A.Check if Contain SKU is null",
							"if (!pm.response.json().data.filter.contain_sku) {",
							"    // Assert that Contain SKU is null",
							"    pm.test(\"Contain SKU is null\", function() {",
							"        pm.expect(pm.response.json().data.filter.contain_sku).to.equal(\"\"); // Validate that Contain SKU is null in the response",
							"    });",
							"} ",
							"// #7B. Check if Contain SKU is displayed",
							"else {",
							"    // Assert that Contain SKU displayed",
							"    pm.test('Contain SKU is returned; data type is string', function () {",
							"        pm.expect(pm.response.json().data.filter.contain_sku).to.be.a('string'); // Validate that Contain SKU is a string",
							"    });",
							"}",
							"",
							"//Location ID",
							"// #8A.Check if Location ID is null",
							"if (!pm.response.json().data.filter.location_id) {",
							"    // Assert that Location ID is null",
							"    pm.test(\"Location ID is null\", function() {",
							"        pm.expect(pm.response.json().data.filter.location_id).to.equal(\"\"); // Validate that Location ID is null in the response",
							"    });",
							"} ",
							"// #8B. Check if Location ID is displayed",
							"else {",
							"    // Assert that Location ID displayed",
							"    pm.test('Location ID is returned; data type is string', function () {",
							"        pm.expect(pm.response.json().data.filter.location_id).to.be.a('string'); // Validate that Location ID is a string",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "cookie",
						"value": "server=QA002;",
						"type": "text"
					},
					{
						"key": "cookie",
						"value": "server=JDAVID;",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{DOMAIN}}/v/api/v1/orders/list_purchase_orders?purchase_order=ZH45161690&order_ready_date_from=2024-04-25 01:34:39&order_ready_date_to=2023-03-28 11:59:10",
					"host": [
						"{{DOMAIN}}"
					],
					"path": [
						"v",
						"api",
						"v1",
						"orders",
						"list_purchase_orders"
					],
					"query": [
						{
							"key": "purchase_order",
							"value": "ZH45161690",
							"description": "partial or full matching purchase order string"
						},
						{
							"key": "order_ready_date_from",
							"value": "2024-04-25 01:34:39",
							"description": "this is mandatory field Date time format"
						},
						{
							"key": "order_ready_date_to",
							"value": "2023-03-28 11:59:10",
							"description": "this is mandatory field Date time format"
						},
						{
							"key": "order_status_code",
							"value": "LABELLED",
							"description": "can be one of the following value â€˜UNSHIPPED_ORDER','LABELLED','MANIFESTED','CANCELLED'",
							"disabled": true
						},
						{
							"key": "contain_sku",
							"value": "ZH",
							"description": "matching any purchase order containing a SKU as line item",
							"disabled": true
						},
						{
							"key": "location_id",
							"value": "24562",
							"description": "matching ship from warehouse location ID",
							"disabled": true
						}
					]
				},
				"description": "This API call is able to filter and return a list of orders matching the conditional criteria parameters supplied in the body of the request.\n\nOrder is the equivalent of a Purchase Order or Sales Order in this context. There is a maximum limit of results returnable per each request."
			},
			"response": []
		},
		{
			"name": "Warehouse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// MMU 03.15.2024",
							"// Get Warehouse/s Details",
							"// When no location_id is provided, all valid warehouse location for shipping will be listed",
							"",
							"// #1A. Check if the status is 'ok'",
							"if (pm.response.json().status === 'ok') {",
							"    pm.test(\"Status is OK\", function() {",
							"        pm.expect(pm.response.json().status).to.eql(\"ok\"); // Validate that status is 'ok'",
							"    });",
							"}",
							"",
							"// #1B. Check if Invalid Token/Token Expired",
							"else {",
							"//    (pm.response.json().status === 'error') ",
							"    // Assert that token is invalid/expired",
							"    pm.test(\"Invalid Access Token/Token Expired\", function() {",
							"        pm.response.to.have.status(401);",
							"    });",
							"}",
							"",
							"// Validate warehouse/s details",
							"const dataResponse = pm.response.json();",
							"console.log(dataResponse);",
							"",
							"// Check if there is more than one Location ID",
							"if (Array.isArray(dataResponse.data) && dataResponse.data.length > 1) {",
							"    dataResponse.data.forEach((data, index) => {",
							"        // Perform tests on each Location ID",
							"        // 2. Location ID",
							"        pm.test(`Location ID for Warehouse \"${data.location_name}\" is returned, data type is number`, () => {",
							"            pm.expect(data.location_id).to.not.be.null; // Validate that Location ID is in the response",
							"            pm.expect(data.location_id).to.be.a('number'); // Validate that Location data type is number",
							"        });",
							"",
							"        // #3. Check if Location Name is null or a string",
							"        if (data.location_name === null) {",
							"            pm.test(`Location Name for Warehouse \"${data.location_name}\" is null`, function() {",
							"                pm.expect(data.location_name).to.be.null; // Validate that Location Name is null",
							"            });",
							"        } else {",
							"            pm.test(`Location Name for Warehouse \"${data.location_name}\" is returned; data type is string`, function() {",
							"                pm.expect(data.location_name).to.be.a('string'); // Validate that Location Name is in the response and is a string",
							"            });",
							"        }",
							"",
							"        // #4. Check if General Location is null or a string",
							"        if (data.general_location === null) {",
							"            pm.test(`General Location for Warehouse \"${data.location_name}\" is null`, function() {",
							"                pm.expect(data.general_location).to.be.null; // Validate that General Location Name is null",
							"            });",
							"        } else {",
							"            pm.test(`General Location for Warehouse \"${data.location_name}\" is returned; data type is string`, function() {",
							"                pm.expect(data.general_location).to.be.a('string'); // Validate that General Location Name is in the response and is a string",
							"            });",
							"        }",
							"",
							"        // #5. Check if Contact Person is null or a string",
							"        if (data.contact === null) {",
							"            pm.test(`Contact Person for Warehouse \"${data.location_name}\" is null`, function() {",
							"                pm.expect(data.contact).to.be.null; // Validate that Contact Person is null",
							"            });",
							"        } else {",
							"            pm.test(`Contact Person for Warehouse \"${data.location_name}\" is returned; data type is string`, function() {",
							"                pm.expect(data.contact).to.be.a('string'); // Validate that Contact Person is in the response and is a string",
							"            });",
							"        }",
							"",
							"        // #6. Check if Phone is null or a string",
							"        if (data.phone === null) {",
							"            pm.test(`Phone Number for Warehouse \"${data.location_name}\" is null`, function() {",
							"                pm.expect(data.phone).to.be.null; // Validate that Phone Number is null",
							"            });",
							"        } else {",
							"            pm.test(`Phone Number for Warehouse \"${data.location_name}\" is returned; data type is string`, function() {",
							"                pm.expect(data.phone).to.be.a('string'); // Validate that Phone Number is in the response and is a string",
							"            });",
							"        }",
							"",
							"        // #7. Check if Extension Number is null or a string",
							"        if (data.phone_extension === null) {",
							"            pm.test(`Extension Number for Warehouse \"${data.location_name}\" is null`, function() {",
							"                pm.expect(data.phone_extension).to.be.null; // Validate that Extension Number is null",
							"            });",
							"        } else {",
							"            pm.test(`Extension Number for Warehouse \"${data.location_name}\" is returned; data type is string`, function() {",
							"                pm.expect(data.phone_extension).to.be.a('string'); // Validate that Extension Number is in the response and is a string",
							"            });",
							"        }",
							"",
							"        // #8. Check if Fax Number is null or a string",
							"        if (data.fax === null) {",
							"            pm.test(`Fax Number for Warehouse \"${data.location_name}\" is null`, function() {",
							"                pm.expect(data.fax).to.be.null; // Validate that Fax Number is null",
							"            });",
							"        } else {",
							"            pm.test(`Fax Number for Warehouse \"${data.location_name}\" is returned; data type is string`, function() {",
							"                pm.expect(data.fax).to.be.a('string'); // Validate that Fax Number is in the response and is a string",
							"            });",
							"        }",
							"",
							"        // #9. Check if Email Address is null or a string",
							"        if (data.email === null) {",
							"            pm.test(`Email Address for Warehouse \"${data.location_name}\" is null`, function() {",
							"                pm.expect(data.email).to.be.null; // Validate that Email Address is null",
							"            });",
							"        } else {",
							"            pm.test(`Email Address for Warehouse \"${data.location_name}\" is returned; data type is string`, function() {",
							"                pm.expect(data.email).to.be.a('string'); // Validate that Email Address is in the response and is a string",
							"            });",
							"        }",
							"",
							"        // #10. Check if Warehouse Region is null or a string",
							"        if (data.warehouse_region === null) {",
							"            pm.test(`Warehouse Region for Warehouse \"${data.location_name}\" is null`, function() {",
							"                pm.expect(data.warehouse_region).to.be.null; // Validate that Warehouse Region is null",
							"            });",
							"        } else {",
							"            pm.test(`Warehouse Region for Warehouse \"${data.location_name}\" is returned; data type is string`, function() {",
							"                pm.expect(data.warehouse_region).to.be.a('string'); // Validate that Warehouse Region is in the response and is a string",
							"            });",
							"        }",
							"",
							"        // #11. Check if Warehouse Address 1 is null or a string",
							"        if (data.address_one === null) {",
							"            pm.test(`Warehouse Address 1 for Warehouse \"${data.location_name}\" is null`, function() {",
							"                pm.expect(data.address_one).to.be.null; // Validate that Warehouse Address 1 is null",
							"            });",
							"        } else {",
							"            pm.test(`Warehouse Address 1 for Warehouse \"${data.location_name}\" is returned; data type is string`, function() {",
							"                pm.expect(data.address_one).to.be.a('string'); // Validate that Warehouse Address 1 is in the response and is a string",
							"            });",
							"        }",
							"",
							"        // #12. Check if Warehouse Address 2 is null or a string",
							"        if (data.address_two === null) {",
							"            pm.test(`Warehouse Address 2 for Warehouse \"${data.location_name}\" is null`, function() {",
							"                pm.expect(data.address_two).to.be.null; // Validate that Warehouse Address 2 is null",
							"            });",
							"        } else {",
							"            pm.test(`Warehouse Address 2 for Warehouse \"${data.location_name}\" is returned; data type is string`, function() {",
							"                pm.expect(data.address_two).to.be.a('string'); // Validate that Warehouse Address 2 is in the response and is a string",
							"            });",
							"        }",
							"",
							"        // #13. Check if Warehouse Address 3 is null or a string",
							"        if (data.address_three === null) {",
							"            pm.test(`Warehouse Address 3 for Warehouse \"${data.location_name}\" is null`, function() {",
							"                pm.expect(data.address_three).to.be.null; // Validate that Warehouse Address 3 is null",
							"            });",
							"        } else {",
							"            pm.test(`Warehouse Address 3 for Warehouse \"${data.location_name}\" is returned; data type is string`, function() {",
							"                pm.expect(data.address_three).to.be.a('string'); // Validate that Warehouse Address 3 is in the response and is a string",
							"            });",
							"        }",
							"",
							"        // #14. Check if Warehouse Suburb is null or a string",
							"        if (data.address_suburb === null) {",
							"            pm.test(`Warehouse Suburb for Warehouse \"${data.location_name}\" is null`, function() {",
							"                pm.expect(data.address_three).to.be.null; // Validate that Warehouse Suburb is null",
							"            });",
							"        } else {",
							"            pm.test(`Warehouse Suburb for Warehouse \"${data.location_name}\" is returned; data type is string`, function() {",
							"                pm.expect(data.suburb).to.be.a('string'); // Validate that Warehouse Suburb is in the response and is a string",
							"            });",
							"        }",
							"",
							"        // #15. Check if Warehouse County is null or a string",
							"        if (data.address_county === null) {",
							"            pm.test(`Warehouse County for Warehouse \"${data.location_name}\" is null`, function() {",
							"                pm.expect(data.county).to.be.null; // Validate that Warehouse County is null",
							"            });",
							"        } else {",
							"            pm.test(`Warehouse County for Warehouse \"${data.location_name}\" is returned; data type is string`, function() {",
							"                pm.expect(data.county).to.be.a('string'); // Validate that Warehouse County is in the response and is a string",
							"            });",
							"        }",
							"",
							"        // #16. Check if Warehouse Postal Code is null or a string",
							"        if (data.address_postal_code === null) {",
							"            pm.test(`Warehouse Postal Code for Warehouse \"${data.location_name}\" is null`, function() {",
							"                pm.expect(data.postal_code).to.be.null; // Validate that Warehouse Postal Code is null",
							"            });",
							"        } else {",
							"            pm.test(`Warehouse Postal Code for Warehouse \"${data.location_name}\" is returned; data type is string`, function() {",
							"                pm.expect(data.postal_code).to.be.a('string'); // Validate that Warehouse Postal Code is in the response and is a string",
							"            });",
							"        }",
							"",
							"        // #17. Check if Warehouse Country is null or a string",
							"        if (data.address_country === null) {",
							"            pm.test(`Warehouse Country for Warehouse \"${data.location_name}\" is null`, function() {",
							"                pm.expect(data.country).to.be.null; // Validate that Warehouse Country is null",
							"            });",
							"        } else {",
							"            pm.test(`Warehouse County for Warehouse \"${data.location_name}\" is returned; data type is string`, function() {",
							"                pm.expect(data.country).to.be.a('string'); // Validate that Warehouse Country is in the response and is a string",
							"            });",
							"        }",
							"    });",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "server=LNAEG",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "server=QA002",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{DOMAIN}}/v/api/v1/supplier/warehouses",
					"host": [
						"{{DOMAIN}}"
					],
					"path": [
						"v",
						"api",
						"v1",
						"supplier",
						"warehouses"
					],
					"query": [
						{
							"key": "is_admin",
							"value": "true",
							"disabled": true
						},
						{
							"key": "location_id",
							"value": "24575",
							"description": "optional value for look up a single location detail, leave out to show all valid locations",
							"disabled": true
						}
					]
				},
				"description": "When no location_id is provided, all valid warehouse location for shipping will be listed."
			},
			"response": []
		},
		{
			"name": "Print Label",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Removed redundant test for RFP Date",
							"// Fixed the spelling mistake in test description",
							"const responseData = pm.response.json().data;",
							"const responseStatus = pm.response.json().status;",
							"const responseMessage = responseData.message;",
							"",
							"// #1A. Check if the status is 'ok'",
							"if (responseStatus === 'ok') {",
							"    pm.test(\"Status is OK\", function() {",
							"        pm.expect(responseStatus).to.eql(\"ok\"); // Validate that status is 'ok'",
							"    });",
							"",
							"    // #2. PO Number",
							"    pm.test(\"PO Number is returned\", function () {",
							"        pm.expect(responseData.purchase_order).to.exist; // Validate that PO Number is in the response",
							"        pm.expect(responseData.purchase_order).to.be.a('string'); // Validate that PO Number data type is string",
							"    });",
							"",
							"    // #3. RFP Date",
							"    // rfp_date and purchase_order should reflect the input",
							"    pm.test(\"RFP Date is returned; Data type is date; matches the expected format (YYYY-MM-DD)\", function () {",
							"        pm.expect(responseData.rfp_date).to.exist; // Validate that RFP Date is in the response",
							"        pm.expect(responseData.rfp_date).to.match(/\\d{4}-\\d{2}-\\d{2}/); // Validate that RFP Date data type is date and matches the expected format",
							"    });",
							"",
							"    // #4. Resource Carrier Label",
							"    // resource_carrier_label contains the downloadable link for the carton labels in a pdf file",
							"    if (!responseData.resource_carrier_label) {",
							"        // Assert that Resource Carrier Label is null",
							"        pm.test(\"Resource Carrier Label is null\", function() {",
							"            pm.expect(responseData.resource_carrier_label).to.be.null;",
							"        });",
							"        ",
							"    } else {",
							"        // Assert that Resource Carrier Label data type is string and matches the expected format",
							"        pm.test(\"Resource Carrier Label is returned; data type is string; matches the expected format (link)\", function() {",
							"            pm.expect(responseData.resource_carrier_label).to.match(/https/);",
							"        });",
							"    }",
							"",
							"    // #5. Assigned Carrier Name Service",
							"    pm.test(\"Assigned Carrier Name Service is returned; data type is string\", function() {",
							"        pm.expect(responseData.assigned_carrier_name_service).to.be.a('string'); // Validate that Assigned Carrier Name Service is in the response",
							"    });",
							"",
							"    // Tracking Number",
							"    // tracking_number and assigned_carrier_name_service are data details from the label generated",
							"    pm.test(\"Tracking Number is returned; data type is string\", function() {",
							"        pm.expect(responseData.tracking_number).to.be.a('string'); // Validate that Tracking Number is in the response",
							"    });",
							"",
							"} else if (responseStatus === 'fail') {",
							"    if (responseMessage.includes(\"[SPA_PRINT_LABEL::02] Order not found\")) {",
							"        // PO is either cancelled or invalid",
							"        pm.test(\"PO is either cancelled or invalid\", () => {",
							"            pm.expect(responseMessage).to.contain(\"[SPA_PRINT_LABEL::02] Order not found\");",
							"        });",
							"        ",
							"    } else if (responseMessage.includes(\"[SPA_PRINT_LABEL::04] Bad Request. Invalid Location ID\")) {",
							"        // Invalid Location ID or PO Number is from a different supplier",
							"        pm.test(\"Invalid Location ID or PO Number is from a different supplier\", () => {",
							"            pm.expect(responseMessage).to.contain(\"[SPA_PRINT_LABEL::04] Bad Request. Invalid Location ID\");",
							"        });",
							"",
							"    } else if (responseMessage.includes(\"[SPA_PRINT_LABEL::04] Bad Request. This order is not an unshipped order\")) {",
							"        // PO Status is not unshipped",
							"        pm.test(\"PO Status is not unshipped\", () => {",
							"            pm.expect(responseMessage).to.contain(\"[SPA_PRINT_LABEL::04] Bad Request. This order is not an unshipped order\");",
							"        });",
							"",
							"    } else if (responseMessage.includes(\"[SPA_PRINT_LABEL::04] Bad Request. Container Type Not Allowed\")) {",
							"        // Container Type is not allowed",
							"        pm.test(\"Container Type is not allowed\", () => {",
							"            pm.expect(responseMessage).to.contain(\"[SPA_PRINT_LABEL::04] Bad Request. Container Type Not Allowed\");",
							"        });",
							"",
							"    } else if (responseMessage.includes(\"[SPA_PRINT_LABEL::05] Registration Failed. Please select pickup date of today or later date for PO\")) {",
							"        // RFP Date is less than the Must Ship Date",
							"        pm.test(\"RFP Date is less than the Must Ship Date\", () => {",
							"            pm.expect(responseMessage).to.contain(\"[SPA_PRINT_LABEL::05] Registration Failed. Please select pickup date of today or later date for PO\");",
							"        });",
							"",
							"    } else if (responseMessage.includes(\"[SPA_PRINT_LABEL::05] Registration Failed. Pickup date must be within 3 days from today for PO\")) {",
							"        // Pickup date must be within 3 days from today",
							"        pm.test(\"Pickup date must be within 3 days from today\", () => {",
							"            pm.expect(responseMessage).to.contain(\"[SPA_PRINT_LABEL::05] Registration Failed. Pickup date must be within 3 days from today for PO\");",
							"        });",
							"",
							"    } else {",
							"        pm.test(\"Failed to generate a label\", () => {",
							"            //Failed to generate a label",
							"            pm.expect(responseMessage).to.contain(\"[SPA_PRINT_LABEL::07] Failed to generate a label\");",
							"        });",
							"    }",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Cookie",
						"value": "server=QA020",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "server=JDAVID",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"purchase_order\": \"ZH45161695\",\r\n  \"rfp_date\": \"2024-05-01 11:59:00\",                // rfp_date is when the automated carrier booking will be made if not booked earlier\r\n  \"location_id\": 24562,                             // location_id specify the warehouse location to ship from, it could be either parent or child supplier identifier\r\n  \"consignment\": [                                  // consignment section specify the exactly number of cartons and the dimension for carrier rates and labeling purposes\r\n        {\r\n            \"container_type\": \"Carton(s)\",\r\n            \"container_weight\": 2.34567,            // weight is in kg\r\n            \"container_height\": 3.456789,           // height is in cm\r\n            \"container_width\": 1.2345,              // width is in cm\r\n            \"container_depth\": 4.567890             // depth is in cm\r\n        }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{DOMAIN}}/v/api/v1/label/generate",
					"host": [
						"{{DOMAIN}}"
					],
					"path": [
						"v",
						"api",
						"v1",
						"label",
						"generate"
					]
				},
				"description": "This API call is able to print a label on a PO Number"
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{API-KEY}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "TWSP-API-KEY",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}